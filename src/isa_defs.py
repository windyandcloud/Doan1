# isa_defs.py
from enum import IntEnum
from typing import Dict

class PrivMode(IntEnum):
    USER = 0
    SUPERVISOR = 1
    MACHINE = 3

# Instruction Opcodes
OPCODE_LOAD     = 0b0000011
OPCODE_MISC_MEM = 0b0001111
OPCODE_OP_IMM   = 0b0010011
OPCODE_AUIPC    = 0b0010111
OPCODE_STORE    = 0b0100011
OPCODE_OP       = 0b0110011
OPCODE_LUI      = 0b0110111
OPCODE_BRANCH   = 0b1100011
OPCODE_JALR     = 0b1100111
OPCODE_JAL      = 0b1101111
OPCODE_SYSTEM   = 0b1110011

# Funct3 fields
F3_LB  = 0b000; F3_LH  = 0b001; F3_LW  = 0b010; F3_LBU = 0b100; F3_LHU = 0b101
F3_SB = 0b000; F3_SH = 0b001; F3_SW = 0b010
F3_BEQ  = 0b000; F3_BNE  = 0b001; F3_BLT  = 0b100
F3_BGE  = 0b101; F3_BLTU = 0b110; F3_BGEU = 0b111
F3_ADD_SUB = 0b000; F3_SLL = 0b001; F3_SLT  = 0b010; F3_SLTU = 0b011
F3_XOR     = 0b100; F3_SRL_SRA= 0b101; F3_OR = 0b110; F3_AND  = 0b111
F3_CSRRW  = 0b001; F3_CSRRS  = 0b010; F3_CSRRC  = 0b011
F3_CSRRWI = 0b101; F3_CSRRSI = 0b110; F3_CSRRCI = 0b111

# Funct7 fields
F7_ZERO = 0b0000000  # Used for ADD, SLL, SLT, SLTU, XOR, SRL, OR, AND
F7_SUB  = 0b0100000  # Used for SUB
F7_SRA  = 0b0100000  # Used for SRA

# System instruction funct12 values
SYSTEM_ECALL  = 0x000
SYSTEM_EBREAK = 0x001
SYSTEM_SRET   = 0x102
SYSTEM_MRET   = 0x302
SYSTEM_WFI    = 0x105

# CSR Addresses
CSR_MVENDORID = 0xF11
CSR_MARCHID   = 0xF12
CSR_MIMPID    = 0xF13
CSR_MHARTID   = 0xF14
CSR_MSTATUS   = 0x300
CSR_MISA      = 0x301
CSR_MEDELEG   = 0x302
CSR_MIDELEG   = 0x303
CSR_MIE       = 0x304
CSR_MTVEC     = 0x305
CSR_MCOUNTEREN = 0x306
CSR_MCOUNTINHIBIT = 0x320
CSR_MSCRATCH  = 0x340
CSR_MEPC      = 0x341
CSR_MCAUSE    = 0x342
CSR_MTVAL     = 0x343
CSR_MIP       = 0x344
CSR_SSTATUS   = 0x100
CSR_SEDELEG   = 0x102
CSR_SIDELEG   = 0x103
CSR_SIE       = 0x104
CSR_STVEC     = 0x105
CSR_SCOUNTEREN = 0x106
CSR_SSCRATCH  = 0x140
CSR_SEPC      = 0x141
CSR_SCAUSE    = 0x142
CSR_STVAL     = 0x143
CSR_SIP       = 0x144
CSR_SATP      = 0x180
CSR_USTATUS   = 0x000
CSR_UIE       = 0x004
CSR_UTVEC     = 0x005
CSR_USCRATCH  = 0x040
CSR_UEPC      = 0x041
CSR_UCAUSE    = 0x042
CSR_UTVAL     = 0x043
CSR_UIP       = 0x044
CSR_CYCLE     = 0xC00
CSR_TIME      = 0xC01
CSR_INSTRET   = 0xC02
CSR_CYCLEH    = 0xC80
CSR_TIMEH     = 0xC81
CSR_INSTRETH  = 0xC82

CSR_ADDR: Dict[str, int] = {
    name[4:].lower(): globals()[name] for name in globals() if name.startswith('CSR_')
}
CSR_ADDR["mstatus_mpp_shift"] = 11

# Exception Cause Codes
CAUSE_MISALIGNED_FETCH    = 0x0
CAUSE_FETCH_ACCESS        = 0x1
CAUSE_ILLEGAL_INSTRUCTION = 0x2
CAUSE_BREAKPOINT          = 0x3
CAUSE_MISALIGNED_LOAD     = 0x4
CAUSE_LOAD_ACCESS         = 0x5
CAUSE_MISALIGNED_STORE    = 0x6
CAUSE_STORE_ACCESS        = 0x7
CAUSE_USER_ECALL          = 0x8
CAUSE_SUPERVISOR_ECALL    = 0x9
CAUSE_MACHINE_ECALL       = 0xB
CAUSE_FETCH_PAGE_FAULT    = 0xC
CAUSE_LOAD_PAGE_FAULT     = 0xD
CAUSE_STORE_PAGE_FAULT    = 0xF

# Interrupt Cause Codes
CAUSE_INTERRUPT_FLAG = 1 << 31
INT_U_SOFTWARE = 0
INT_S_SOFTWARE = 1
INT_M_SOFTWARE = 3
INT_U_TIMER    = 4
INT_S_TIMER    = 5
INT_M_TIMER    = 7
INT_U_EXTERNAL = 8
INT_S_EXTERNAL = 9
INT_M_EXTERNAL = 11

# MSTATUS bits
MSTATUS_UIE_SHIFT  = 0
MSTATUS_SIE_SHIFT  = 1
MSTATUS_MIE_SHIFT  = 3
MSTATUS_UPIE_SHIFT = 4
MSTATUS_SPIE_SHIFT = 5
MSTATUS_MPIE_SHIFT = 7
MSTATUS_SPP_SHIFT  = 8
MSTATUS_MPP_SHIFT  = 11
MSTATUS_FS_SHIFT   = 13
MSTATUS_XS_SHIFT   = 15
MSTATUS_MPRV_SHIFT = 17
MSTATUS_SUM_SHIFT  = 18
MSTATUS_MXR_SHIFT  = 19
MSTATUS_TVM_SHIFT  = 20
MSTATUS_TW_SHIFT   = 21
MSTATUS_TSR_SHIFT  = 22
MSTATUS_SD_SHIFT   = 31

MSTATUS_UIE  = 1 << MSTATUS_UIE_SHIFT
MSTATUS_SIE  = 1 << MSTATUS_SIE_SHIFT
MSTATUS_MIE  = 1 << MSTATUS_MIE_SHIFT
MSTATUS_UPIE = 1 << MSTATUS_UPIE_SHIFT
MSTATUS_SPIE = 1 << MSTATUS_SPIE_SHIFT
MSTATUS_MPIE = 1 << MSTATUS_MPIE_SHIFT
MSTATUS_SPP  = 1 << MSTATUS_SPP_SHIFT
MSTATUS_MPP  = 3 << MSTATUS_MPP_SHIFT
MSTATUS_FS   = 3 << MSTATUS_FS_SHIFT
MSTATUS_XS   = 3 << MSTATUS_XS_SHIFT
MSTATUS_MPRV = 1 << MSTATUS_MPRV_SHIFT
MSTATUS_SUM  = 1 << MSTATUS_SUM_SHIFT
MSTATUS_MXR  = 1 << MSTATUS_MXR_SHIFT
MSTATUS_TVM  = 1 << MSTATUS_TVM_SHIFT
MSTATUS_TW   = 1 << MSTATUS_TW_SHIFT
MSTATUS_TSR  = 1 << MSTATUS_TSR_SHIFT
MSTATUS_SD   = 1 << MSTATUS_SD_SHIFT

MSTATUS_WRITABLE_MASK = (
    MSTATUS_UIE | MSTATUS_SIE | MSTATUS_MIE | MSTATUS_UPIE | MSTATUS_SPIE |
    MSTATUS_MPIE | MSTATUS_SPP | MSTATUS_MPP | MSTATUS_FS | MSTATUS_XS |
    MSTATUS_MPRV | MSTATUS_SUM | MSTATUS_MXR | MSTATUS_TVM | MSTATUS_TW | MSTATUS_TSR
)
SSTATUS_WRITABLE_MASK = (
    MSTATUS_SIE | MSTATUS_UIE | MSTATUS_SPIE | MSTATUS_UPIE | MSTATUS_SPP |
    MSTATUS_FS | MSTATUS_XS | MSTATUS_SUM | MSTATUS_MXR
)
MSTATUS_MASK = MSTATUS_WRITABLE_MASK | MSTATUS_SD
SSTATUS_MASK = SSTATUS_WRITABLE_MASK | MSTATUS_SD

# MIP/MIE bits
MIP_USIP = 1 << INT_U_SOFTWARE
MIP_SSIP = 1 << INT_S_SOFTWARE
MIP_MSIP = 1 << INT_M_SOFTWARE
MIP_UTIP = 1 << INT_U_TIMER
MIP_STIP = 1 << INT_S_TIMER
MIP_MTIP = 1 << INT_M_TIMER
MIP_UEIP = 1 << INT_U_EXTERNAL
MIP_SEIP = 1 << INT_S_EXTERNAL
MIP_MEIP = 1 << INT_M_EXTERNAL

MIE_USIE = MIP_USIP
MIE_SSIE = MIP_SSIP
MIE_MSIE = MIP_MSIP
MIE_UTIE = MIP_UTIP
MIE_STIE = MIP_STIP
MIE_MTIE = MIP_MTIP
MIE_UEIE = MIP_UEIP
MIE_SEIE = MIP_SEIP
MIE_MEIE = MIP_MEIP

SIE_MASK = (MIP_USIP | MIP_SSIP | MIP_UTIP | MIP_STIP | MIP_UEIP | MIP_SEIP)
SIE_SIP_MASK = (MIP_SSIP | MIP_STIP | MIP_SEIP)
MIE_MASK = (MIP_MSIP | MIP_MTIP | MIP_MEIP | MIP_SSIP | MIP_STIP | MIP_SEIP | MIP_USIP | MIP_UTIP | MIP_UEIP)

# SATP modes and masks
SATP_MODE_BARE = 0
SATP_MODE_SV32 = 1 << 31
SATP_MODE = (1 << 31)  # Bit 31 for mode
SATP_PPN = 0x003FFFFF  # Bits [21:0] for PPN

# Counter enables
COUNTEREN_CY = 1 << 0
COUNTEREN_TM = 1 << 1
COUNTEREN_IR = 1 << 2
MCOUNTEREN_MASK = COUNTEREN_CY | COUNTEREN_TM | COUNTEREN_IR
SCOUNTEREN_MASK = COUNTEREN_CY | COUNTEREN_TM | COUNTEREN_IR
SCOUNTEREN_CY = COUNTEREN_CY
SCOUNTEREN_TM = COUNTEREN_TM
SCOUNTEREN_IR = COUNTEREN_IR

# Memory-mapped I/O addresses
MTIME_ADDR_LOW     = 0x0200BFF8
MTIME_ADDR_HIGH    = 0x0200BFFC
MTIMECMP_ADDR_LOW  = 0x02004000
MTIMECMP_ADDR_HIGH = 0x02004004
UART_TX_ADDR       = 0x10000000

# FENCE instruction operand bits
FENCE_I_BIT = 1 << 0
FENCE_O_BIT = 1 << 1
FENCE_R_BIT = 1 << 2
FENCE_W_BIT = 1 << 3

# Syscall numbers
SYSCALL_PRINT_CHAR    = 11
SYSCALL_PRINT_INT     = 1
SYSCALL_PRINT_STRING  = 4
SYSCALL_EXIT          = 93
SYSCALL_WRITE         = 64

# Legacy SBI Extensions
SBI_EXT_SET_TIMER         = 0x00
SBI_EXT_CONSOLE_PUTCHAR   = 0x01
SBI_EXT_CONSOLE_GETCHAR   = 0x02
SBI_EXT_SHUTDOWN          = 0x08

# Standard SBI EIDs
SBI_EID_BASE = 0x10
SBI_EID_TIME = 0x54494D45  # "TIME"
SBI_EID_SRST = 0x53525354  # "SRST"

# Base Extension FIDs
SBI_FID_BASE_GET_SPEC_VERSION = 0x0
SBI_FID_BASE_GET_IMPL_ID      = 0x1
SBI_FID_BASE_GET_IMPL_VERSION = 0x2
SBI_FID_BASE_PROBE_EXTENSION  = 0x3

# SRST Extension FID
SBI_FID_SRST_SYSTEM_RESET = 0x0

# TIME Extension FID
SBI_FID_TIME_SET_TIMER = 0x0

# Trap vector modes and alignment
TVEC_MODE_MASK = 0x3
TVEC_MODE_VECTORED = 0x1
TVEC_BASE_ALIGN_DIRECT = 4  # 4-byte alignment for direct mode
TVEC_BASE_ALIGN_VECTORED = 64  # 64-byte alignment for vectored mode

# SIP bits
SIP_SSIP = MIP_SSIP
SIP_USIP = MIP_USIP

# PTE
PTE_V = 1 << 0  # Valid
PTE_R = 1 << 1  # Read
PTE_W = 1 << 2  # Write
PTE_X = 1 << 3  # Execute
PTE_U = 1 << 4  # User
PTE_G = 1 << 5  # Global
PTE_A = 1 << 6  # Accessed
PTE_D = 1 << 7  # Dirty